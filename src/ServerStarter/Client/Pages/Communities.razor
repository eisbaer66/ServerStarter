@page "/communities"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Http.Connections.Client
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.Extensions.Logging
@using ServerStarter.Client.Components
@using ServerStarter.Shared
@attribute [Authorize]
@implements IDisposable
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider AccessTokenProvider
@inject ILogger<Communities> Logger

<h1>Communities</h1>

@if (communities == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <label><input type="checkbox" @bind="playsounds" /> Play sounds</label>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>CurrentPlayers</th>
                <th>WaitingPlayers</th>
                <th>MinimumPlayers</th>
                <th>Servers</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var community in communities)
            {
                <CommunityComponent @ref="Childs" Community="community" HubConnection="HubConnection" @bind-PlaySounds="playsounds"></CommunityComponent>
            }
        </tbody>
    </table>
}

@code {
    private readonly IList<CommunityComponent> childs = new List<CommunityComponent>();

    private bool playsounds = true;
    private Community[] communities;
    private HubConnection HubConnection;

    CommunityComponent Childs
    {
        set { childs.Add(value); }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            communities = await Http.GetFromJsonAsync<Community[]>("api/Communities");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }


        Action<HttpConnectionOptions> ConfigureHttpConnection()
        {
            return options =>
            {
                options.AccessTokenProvider = async () =>
                {
                    var result = await AccessTokenProvider.RequestAccessToken();
                    AccessToken token;
                    bool tryGetToken = result.TryGetToken(out token);
                    if (!tryGetToken)
                        return null;
                    return token.Value;
                };
            };
        }

        HubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager
                         .ToAbsoluteUri("/hubs/communities"), ConfigureHttpConnection())
            .Build();

        HubConnection.On<Guid>("JoinQueue", async (communityId) =>
                                                 {
                                                     CommunityComponent community = childs.FirstOrDefault(c => c.Community.Id == communityId);
                                                     if (community == null)
                                                     {
                                                         Logger.LogError("could not rejoin {CommunityId}, because it was not loaded", communityId);
                                                         return;
                                                     }

                                                     await community.JoinQueue();
                                                 });
        await HubConnection.StartAsync();
    }

    public void Dispose()
    {
        if (HubConnection != null)
            _ = HubConnection.DisposeAsync();
    }

}
