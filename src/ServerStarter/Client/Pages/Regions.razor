@page "/regions"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging
@using ServerStarter.Client.Hubs
@using ServerStarter.Shared
@using ServerStarter.Client.Components
@using RegionDto = ServerStarter.Shared.Region;
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider AccessTokenProvider
@inject ILogger<Communities> Logger
@inject QueueSettings Settings
@inject IQueueService QueueService


<div class="container">

    <div class="head">

        <span class="name" data-toggle="tooltip" title="balance mod"><img class="banner" src="\assets\img\banner.png"/></span>

        <h1>choose your region</h1>

        @if (_regions == null)
        {
            <p class="loading" load><em>Loading...</em></p>
        }
        else
        {
            <div class="regions">
                @foreach (var region in _regions)
                {
                    <RegionComponent Region="region"></RegionComponent>
                }
            </div>
        }
    </div>

    @if (QueueService.State == HubConnectionState.Connected)
    {
        <div class="indicator">
            <figure class="queuedIcon"/>
            <span>updating automatically</span>
        </div>
    }
    else
    {
        <div class="indicator">
            <figure class="queuedIcon stopped"/>
            <span>Unable to update. Please reload the page.</span>
        </div>
    }
    <EditForm Model="@Settings" class="d-flex flex-column">
        @*OnValidSubmit="@SettingsSpeichern"*@
        <DataAnnotationsValidator />

        <label>
            <InputCheckbox id="playsounds" @bind-Value="Settings.PlaySounds"></InputCheckbox>
            Play sounds
        </label>
        <label>
            <InputCheckbox id="automaticJoinEnabled" @bind-Value="Settings.AutomaticJoinEnabled"></InputCheckbox>
            automatically join,<InputNumber id="automaticJoinDelay" class="shortInline" @bind-Value="Settings.AutomaticJoinDelayInSeconds"></InputNumber> seconds after server is ready to play
        </label>

        <ValidationSummary />
        @*<button type="submit">Submit</button>*@
    </EditForm>
    <div class="details">
        @foreach (var community in _joinedRegions.Values)
        {
            <div class="region">
                <RegionDetailsComponent @ref="Childs" Community="community"></RegionDetailsComponent>
            </div>
        }
    </div>

</div>
<JoinServerPopupComponent @ref="_popup"></JoinServerPopupComponent>

@code {

    private bool _rendered;
    private RegionDto[] _regions;
    private JoinServerPopupComponent _popup;
    private readonly IDictionary<Guid, Community> _joinedRegions = new Dictionary<Guid, Community>();
    private readonly List<IDisposable> _resources = new List<IDisposable>();

    private readonly IList<RegionDetailsComponent> childs = new List<RegionDetailsComponent>();
    RegionDetailsComponent Childs
    {
        set { childs.Add(value); }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadRegions();
        (await QueueService.Init(new StateEvents
        {
            Joined = async id =>
            {
                if (_joinedRegions.ContainsKey(id))
                    return;

                await JoinQueue(id);
            },
            Left = async id =>
            {
                if (!_joinedRegions.ContainsKey(id))
                    return;

                _joinedRegions.Remove(id);
                StateHasChanged();
            },
        }))
            .AddTo(_resources);

        QueueService.JoinedServer = new EventCallback<CommunityServer>(this, (Func<CommunityServer, Task>)JoinedServer);

        QueueService.OnCommunityChanged(async communityId =>
        {
            if (!_joinedRegions.ContainsKey(communityId))
                return;

            Community community = null;
            try
            {
                community = await Http.GetFromJsonAsync<Community>("api/Communities/" + communityId);
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }

            _joinedRegions[communityId] = community;
            await CheckPlayability(community);

            StateHasChanged();
        });
    }

    private async Task CheckPlayability(Community community)
    {
        int playerPool = community.CurrentPlayers + community.WaitingPlayers;
        if (playerPool >= community.MinimumPlayers)
            await _popup.Notify(community);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);


        if (_rendered)
            return;
        _rendered = true;

        foreach (Guid id in QueueService.GetJoined())
        {
            await JoinQueue(id);
        }
    }

    private async Task JoinQueue(Guid id)
    {
        var community = await Http.GetFromJsonAsync<Community>("api/Communities/" + id);
        _joinedRegions.Add(community.Id, community);

        StateHasChanged();
    }

    private async Task LoadRegions()
    {
        try
        {
            _regions = await Http.GetFromJsonAsync<RegionDto[]>("api/Region");
            await QueueService.Init();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task JoinedServer(CommunityServer server)
    {
        foreach (RegionDetailsComponent component in childs)
        {
            await component.LeaveQueue();
        }
        _joinedRegions.Clear();
    }
}
