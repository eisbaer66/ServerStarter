@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging
@using ServerStarter.Client.Hubs
@using ServerStarter.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILogger<RegionComponent> Logger
@inject IQueueService QueueService
@implements IDisposable

<div class="region">
    <div class="row">
        <span class="name" data-toggle="tooltip" title="@Region.Name"><img class="regionIcon round" src="@Region.IconUrl" /></span>
    </div>
    <div class="row">
        <span class="name" data-toggle="tooltip" title="@Region.Name"><h2>@Region.Name</h2></span>
    </div>
    <div class="row secondary">
        <span data-toggle="tooltip" title="@Region.CurrentPlayers playing">@Region.CurrentPlayers playing</span>
    </div>
    <div class="row secondary">
        <span data-toggle="tooltip" title="@Region.WaitingPlayers in queue">@Region.WaitingPlayers in queue</span>
    </div>
    @if (_joined)
    {
        <button class="btn btn-themed btn-cancel w-100" @onclick="LeaveRegion" disabled="@(!IsConnected)">cancel</button>
    }
    else
    {
        <button class="btn btn-themed btn-joinleave w-100" @onclick="JoinRegion" disabled="@(!IsConnected)">join!</button>
    }
</div>

@code {

    private bool _rendered = false;
    private bool _joined;
    private Region _region;
    [Parameter]
    public Region Region
    {
        get => _region;
        set
        {
            if (_region != null && value != null && _region.Updated >= value.Updated)
                return;

            _region = value;
        }
    }

    private readonly List<IDisposable> _resources = new List<IDisposable>();

    protected override async Task OnInitializedAsync()
    {
        (await QueueService.Init(new StateEvents
        {
            Joined = async id =>
            {
                if (id != Region.Id)
                    return;

                _joined = true;
            },
            Left = async id =>
            {
                if (id != Region.Id)
                    return;

                _joined = false;
            },
        }))
            .AddTo(_resources);

        if (QueueService.IsJoined(Region.Id))
        {
            _joined = true;
        }
        QueueService.OnCommunityChanged(async id => await CommunityChanged(id))
                    .AddTo(_resources);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);


        if (_rendered)
            return;
        _rendered = true;

        if (QueueService.IsJoined(Region.Id))
        {
            _joined = true;
        }
    }

    private async Task CommunityChanged(Guid id)
    {
        if (id != Region.Id)
            return;
        try
        {
            Region = await Http.GetFromJsonAsync<Region>("api/Region/" + Region.Id);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        StateHasChanged();
    }

    public async Task JoinRegion()
    {
        await QueueService.Join(Region.Id);
    }

    public async Task LeaveRegion()
    {
        await QueueService.Leave(Region.Id);
    }

    public bool IsConnected =>
        QueueService.State == HubConnectionState.Connected;

    public void Dispose()
    {
        foreach (var s in _resources)
        {
            s.Dispose();
        }
        _resources.Clear();
    }

}
