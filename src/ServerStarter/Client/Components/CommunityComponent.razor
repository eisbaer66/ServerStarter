@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging
@using ServerStarter.Shared
@using System.Timers
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject ILogger<CommunityComponent> Logger
@implements IDisposable

<div class="row community">
    <div class="col-sm-12 col-lg-4 col-xl-3">
        <div class="row col-12">
            <span class="name" data-toggle="tooltip" title="@Community.Name">@Community.Name</span>
        </div>
        <div class="row col-12">
            <span data-toggle="tooltip" title="@FullServers/@Community.Servers.Count full servers">@FullServers/@Community.Servers.Count full servers</span>
        </div>
        <div class="row col-12">
            @if (joined)
            {
                <figure class="queuedIcon" />
            }
        </div>
    </div>
    <div class="col-sm-12 col-lg-5 col-xl-3 players">
        <div class="row col-sm-6 col-lg-12 label">
            <span data-toggle="tooltip" title="queue for @PreferredServer.Name (@PreferredServer.Ip)">@PreferredServer.Name (<a href="@GetConnectLink(PreferredServer)" target="_blank">@PreferredServer.Ip</a>)</span>
        </div>
        <div class="row col-12">
            <span data-toggle="tooltip" title="@Community.CurrentPlayers players currently in-game">@Community.CurrentPlayers players currently in-game</span>
        </div>
        <div class="row col-12">
            <span data-toggle="tooltip" title="@Community.WaitingPlayers players ready to play">@Community.WaitingPlayers players ready to play</span>
        </div>
        <div class="row col-12">
            <span data-toggle="tooltip" title="@NeededPlayers more players needed to play">@NeededPlayers more players needed to play</span>
        </div>
    </div>
    <div class="col-sm-12 col-lg-3 col-xl-2">
        @if (joined)
        {
            <button class="btn btn-themed btn-joinleave w-100" @onclick="LeaveQueue" disabled="@(!IsConnected)">not ready</button>
        }
        else
        {
            <button class="btn btn-themed btn-joinleave w-100" @onclick="JoinQueue" disabled="@(!IsConnected)">Ready to play</button>
        }
    </div>
    <div class="col-sm-12 col-lg-12 col-xl-4 servers">
        <ul>
            @foreach (var server in Community.Servers.OrderByDescending(s => s.CurrentPlayers))
            {
            <li>
                @server.Name (<a href="@GetConnectLink(server)" target="_blank">@server.Ip</a>): @server.CurrentPlayers
            </li>
            }
        </ul>
    </div>

    @if (joined)
    {
        
        <div class="chatMembers col-sm-12 col-lg-12 col-xl-2 m-t-10">
            queued players:
            <ul id="chatMemberList">
                @foreach (var player in Community.QueuedPlayers)
                {
                    <li>@player.Name</li>
                }
            </ul>
        </div>
        <div class="col-sm-12 col-lg-12 col-xl-10 m-t-10">
            <div class="chat">
                <div class="messages">
                    <ul id="messagesList">
                        @foreach (var message in messages)
                        {
                            <li @ref="lastMessageElement"><span class="timestamp">@message.Timestamp</span><span>@message.Text</span></li>
                        }
                    </ul>
                </div>
                <div class="controls">
                    <input @ref="messageInputReference" @bind="messageInput" size="50" @onkeyup="KeyUp"/>
                    <button class="btn btn-themed" @onclick="Send" disabled="@(!IsConnected)">Send</button>
                </div>
            </div>
        </div>
    }
</div>

<audio preload="auto" id="startSound0" src="assets/sounds/Announcer_am_gamestarting02.wav"></audio>
<audio preload="auto" id="startSound1" src="assets/sounds/Announcer_am_gamestarting04.wav"></audio>
<audio preload="auto" id="startSound2" src="assets/sounds/Announcer_am_gamestarting05.wav"></audio>
<audio preload="auto" id="startSound3" src="assets/sounds/Announcer_am_roundstart04.wav"></audio>
    
@if (showPopup)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content modal-content-themed">
                <div class="modal-header">
                    <h3 class="modal-title">@PreferredServer.Name ready to play</h3>
                    <button type="button" class="close"
                            @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    server @PreferredServer.Name  with @PreferredServer.CurrentPlayers playing at the moment is ready to start

                    <div class="buttons">
                        <button class="btn btn-themed secondary"
                                @onclick="ClosePopup">
                            Leave
                        </button>
                        <button class="btn btn-themed primary"
                                @onclick="() => JoinGame(PreferredServer)">
                            Join
                            @if (QueueSettings.AutomaticJoinEnabled)
                            {
                                <span>(@SecondsTillAutoJoin sec.)</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public Community Community { get; set; }

    [Parameter]
    public HubConnection HubConnection { get; set; }

    [Parameter]
    public QueueSettings QueueSettings { get; set; }

    [Parameter]
    public EventCallback<QueueSettings> QueueSettingsChanged { get; set; }

    [Parameter]
    public EventCallback<CommunityServer> JoinedServer { get; set; }

    ElementReference messageInputReference;
    ElementReference lastMessageElement;

    private readonly List<Message> messages = new List<Message>();

    private readonly List<IDisposable> subscription = new List<IDisposable>();

    private readonly List<IDisposable> groupSubscription = new List<IDisposable>();

    private readonly Random _random = new Random();

    private bool showPopup = false;
    private bool joined = false;

    private string messageInput;
    private DateTime _autoJoinTime;
    private Timer _timer;

    private int SecondsTillAutoJoin => Math.Max(0, (int)(_autoJoinTime - DateTime.UtcNow).TotalSeconds);

    private int NeededPlayers
    {
        get
        {
            int neededPlayers = Community.MinimumPlayers - Community.CurrentPlayers - Community.WaitingPlayers;
            if (neededPlayers < 0)
                return 0;

            return neededPlayers;
        }
    }

    private int FullServers
    {
        get
        {
            return Community.Servers.Count(s => s.ConsideredFull);
        }
    }

    private CommunityServer PreferredServer
    {
        get
        {
            return Community.Servers.FirstOrDefault(s => s.PreferredForQueue);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        subscription.Add(HubConnection.On<string>("Changed", async (communityId) =>
        {
            if (communityId != Community.Id.ToString())
                return;

            await LoadCommunity();
        }));
    }

    private async Task LoadCommunity()
    {
        try
        {
            Community = await Http.GetFromJsonAsync<Community>("api/Communities/" + Community.Id);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        StateHasChanged();

        await CheckPlayability();
    }

    private async Task CheckPlayability()
    {
        if (!joined)
            return;

        int playerPool = Community.CurrentPlayers + Community.WaitingPlayers;
        if (playerPool >= Community.MinimumPlayers)
            await Notify();
    }

    private async Task Notify()
    {
        if (showPopup)
            return;

        if (PreferredServer == null)
        {
            Logger.LogError("could not find fitting server for players in {Community}", Community);
            return;     //TODO Callback for zarlo?
        }

        if (QueueSettings.PlaySounds)
        {
            string id = "startSound" + _random.Next(4);
            await JsRuntime.InvokeAsync<string>("Play", id);
        }

        if (QueueSettings.AutomaticJoinEnabled)
        {
            _autoJoinTime = DateTime.UtcNow.AddSeconds(QueueSettings.AutomaticJoinDelayInSeconds);
            if (DateTime.UtcNow >= _autoJoinTime)
            {
                Logger.LogTrace("auto-joining immediately");
                await JoinGame(PreferredServer);
                return;
            }

            _timer = new Timer(1000)
            {
                AutoReset = true,
            };
            _timer.Elapsed += async (sender, args) =>
            {
                Logger.LogTrace("checking auto-join");

                if (DateTime.UtcNow >= _autoJoinTime)
                {
                    Logger.LogTrace("auto-joining");
                    await JoinGame(PreferredServer);
                }
                StateHasChanged();
            };
            _timer.Enabled = true;
        }

        showPopup = true;
        StateHasChanged();
    }

    private void DisableAutoJoinTimer()
    {
        if (_timer == null)
            return;

        _timer.Enabled = false;
        _timer.Dispose();
        _timer = null;
    }

    public async Task ClosePopup()
    {
        await LeaveQueue();
    }

    public async Task JoinGame(CommunityServer server)
    {
        DisableAutoJoinTimer();

        string link = GetConnectLink(server);
        await JsRuntime.InvokeAsync<string>("openNewWindow", link);

        if (JoinedServer.HasDelegate)
            await JoinedServer.InvokeAsync(server);
    }

    public async Task JoinQueue()
    {
        if (joined)
            return;

        groupSubscription.Add(HubConnection.On<string, string, string>("MessageReceived", async (communityId, user, message) =>
        {
            if (communityId != Community.Id.ToString())
                return;

            var encodedMsg = $"{user}: {message}";
            await AddMessage(encodedMsg);
        }));

        groupSubscription.Add(HubConnection.On<string, string>("UserJoined", async (communityId, user) =>
        {
            if (communityId != Community.Id.ToString())
                return;

            var encodedMsg = $"{user} joined the queue";
            await AddMessage(encodedMsg);
        }));

        groupSubscription.Add(HubConnection.On<string, string>("UserLeft", async (communityId, user) =>
        {
            if (communityId != Community.Id.ToString())
                return;

            var encodedMsg = $"{user} left the queue";
            await AddMessage(encodedMsg);
        }));

        groupSubscription.Add(HubConnection.On<Guid>("LeaveQueue", async (communityId) =>
        {
            if (communityId != Community.Id)
                return;

            await LeaveQueue();
        }));

        await HubConnection.InvokeAsync("JoinGroup", Community.Id);
        joined = true;
        StateHasChanged();
        await FocusInput();

        await LoadCommunity();
    }

    async Task AddMessage(string msg)
    {
        messages.Add(new Message("[" + DateTime.Now.ToString("dd.MM.yyyy HH:mm:ss") + "]", msg));
        StateHasChanged();
        await ScrollToLastMessage();
    }

    public async Task LeaveQueue()
    {
        if (!joined)
            return;
        DisableAutoJoinTimer();

        await HubConnection.InvokeAsync("LeaveGroup", Community.Id);

        foreach (var subscription in groupSubscription)
        {
            subscription.Dispose();
        }
        groupSubscription.Clear();

        messages.Clear();
        messageInput = string.Empty;
        joined = false;
        showPopup = false;
        StateHasChanged();

        await LoadCommunity();
    }

    async Task Send()
    {
        if (!string.IsNullOrEmpty(messageInput))
            await HubConnection.SendAsync("SendMessage", Community.Id, messageInput);

        messageInput = string.Empty;

        await FocusInput();
    }

    private async Task FocusInput()
    {
        await JsRuntime.InvokeVoidAsync("uiFunctions.focusElement", messageInputReference);
    }

    private async Task ScrollToLastMessage()
    {
        await JsRuntime.InvokeVoidAsync("uiFunctions.scrollElementIntoView", lastMessageElement);
    }

    async Task KeyUp(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
            await Send();
    }

    public bool IsConnected =>
        HubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        foreach (var s in subscription)
        {
            s.Dispose();
        }
        subscription.Clear();

        LeaveQueue();
    }

    private string GetConnectLink(CommunityServer server)
    {
        return "steam://connect/" + server.Ip;
    }

    private class Message
    {
        public Message(string timestamp, string text)
        {
            Timestamp = timestamp ?? throw new ArgumentNullException(nameof(timestamp));
            Text = text ?? throw new ArgumentNullException(nameof(text));
        }

        public string Timestamp { get; set; }
        public string Text { get; set; }
    }

}
