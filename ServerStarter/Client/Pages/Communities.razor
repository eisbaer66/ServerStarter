@page "/communities"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Http.Connections.Client
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.DependencyInjection
@using ServerStarter.Shared
@using ServerStarter.Client.Components
@attribute [Authorize]
@implements IDisposable
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider AccessTokenProvider

<h1>Communities</h1>

@if (communities == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>CurrentPlayers</th>
                <th>WaitingPlayers</th>
                <th>MinimumPlayers</th>
                <th>Servers</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var community in communities)
            {
                <CommunityComponent Community="community" HubConnection="HubConnection"></CommunityComponent>
            }
        </tbody>
    </table>
}

@code {
    private Community[] communities;
    private HubConnection HubConnection;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            communities = await Http.GetFromJsonAsync<Community[]>("Communities");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }


        Action<HttpConnectionOptions> ConfigureHttpConnection()
        {
            return options =>
                   {
                       options.AccessTokenProvider = async () =>
                                                           {
                                                               var result = await AccessTokenProvider.RequestAccessToken();
                                                               AccessToken token;
                                                               bool tryGetToken = result.TryGetToken(out token);
                                                               if (!tryGetToken)
                                                                   return null;
                                                               return token.Value;
                                                           };
                   };
        }

        HubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager
                         .ToAbsoluteUri("/hubs/communities"), ConfigureHttpConnection())
            .Build();
        await HubConnection.StartAsync();
    }

    public void Dispose()
    {
        if (HubConnection != null)
            _ = HubConnection.DisposeAsync();
    }

}
